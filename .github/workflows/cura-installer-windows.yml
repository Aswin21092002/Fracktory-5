name: Windows Installer
run-name: ${{ inputs.cura_conan_version }} for 5.6 Windows-${{ inputs.architecture }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      installer_name:
        description: 'Name of the .exe and .msi'
        default: 'Fracktory'
        required: False
        typr: string

      app_name:
        description: 'Name of the Application in the installer'
        default: 'Fracktory'
        required: False
        typr: string

      conan_args:
        description: '5.6 Conan args: eq.: --require-override'
        default: ''
        required: false
        type: string

      enterprise:
        description: 'Build Cura as an Enterprise edition'
        default: false
        required: true
        type: boolean

      staging:
        description: 'Use staging API'
        default: false
        required: true
        type: boolean

      architecture:
        description: 'Architecture'
        required: true
        default: 'X64'
        type: string

      operating_system:
        description: 'OS'
        required: true
        default: 'windows-2022'
        type: string

      conan_internal:
        required: false
        default: false
        type: boolean

permissions:
  contents: read

env:
  # CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_USER }}
  # CONAN_PASSWORD: ${{ secrets.CONAN_PASS }}
  WIN_CERT_INSTALLER_CER: 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
  WIN_CERT_INSTALLER_CER_PASS: password
  CURA_CONAN_VERSION: cura/latest@ultimaker/testing
  
  ENTERPRISE: False
  STAGING: False

jobs:
  cura-installer-create:
    runs-on: ${{ inputs.operating_system }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.head_ref }}

      - name: Checkout repo PR
        uses: actions/checkout@v4
        if: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
        with:
          fetch-depth: 1
          ref: ${{ github.base_ref }}

      - name: Sync pip requirements
        run: curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/.github/workflows/requirements-runner.txt
        working-directory: .github\workflows

      - name: Setup Python and pip
        uses: actions/setup-python@v4
        with:
          python-version: 3.11.x
          cache: pip
          cache-dependency-path: .\.github\workflows\requirements-runner.txt

      - name: Install Python requirements and Create default Conan profile
        run: pip install -r .\.github\workflows\requirements-runner.txt

      - name: Setup pipeline caches
        run: |
          New-Item -ItemType Directory -Force -Path C:\Users\runneradmin\.conan\downloads

      - name: Create default Conan profile
        run: conan profile new default --detect

      - name: Get Conan configuration
        run: |
          conan config install https://github.com/Ultimaker/conan-config.git
          conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/${{ runner.os }}/${{ runner.arch }}"

      - name: Add Cura private Artifactory remote
        if: ${{ inputs.conan_internal }}
        run: conan config install https://github.com/Ultimaker/conan-config.git -a "-b runner/internal"

      - name: Cache Conan downloads
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\.conan\downloads
          key: ${{ runner.os }}-conan-downloads-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-conan-downloads-

      - name: Create the Packages (Powershell)
        run: |
          conan create . local/test --build=missing --update -c tools.build:skip_test=True
          conan install cura/5.6.1-beta.0@local/test  ${{ inputs.conan_args }} --build=missing --update -if cura_inst -g VirtualPythonEnv -o cura:enterprise=False -o cura:staging=False -o cura:internal=False -c tools.build:skip_test=True -s curaengine:build_type=RelWithDebInfo

      - name: Set Environment variables for Cura (Powershell)
        run: |
          echo "${Env:WIX}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          .\cura_inst\Scripts\activate_github_actions_env.ps1
          .\cura_inst\Scripts\activate_github_actions_version_env.ps1

      - name: Create the Cura dist
        run: |
          pyinstaller ./cura_inst/UltiMaker-Cura.spec

      # - name: Setup Sentry CLI
      #   uses: mathieu-bour/setup-sentry-cli@v1
      #   with:
      #     version: latest
      #     token: ${{ secrets.CURAENGINE_SENTRY_TOKEN }}
      #     organization: ultimaker-o7
      #     project: curaengine

      # - name: Upload and remove debug symbols
      #   run: |
      #     sentry-cli debug-files upload .\UltiMaker-Cura\CuraEngine.exe
      #     sentry-cli debug-files upload .\UltiMaker-Cura\CuraEngine.pdb
      #     sentry-cli debug-files upload .\UltiMaker-Cura\Arcus.dll
      #     sentry-cli debug-files upload .\UltiMaker-Cura\polyclipping.dll
      #   working-directory: dist

      - name: Get installer helper scripts
        run: |
          New-Item -ItemType Directory -Force -Path runner_scripts
          cd runner_scripts
          curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/runner_scripts/cura_installer_filename.py
          curl -O https://raw.githubusercontent.com/Ultimaker/cura-workflows/main/runner_scripts/summarize_used_dependencies.py

      - name: Output the name file name and extension
        id: filename
        run: python runner_scripts/cura_installer_filename.py --os ${{ runner.os }} --arch ${{ inputs.architecture }} --enterprise ${{ inputs.enterprise }} --internal ${{ inputs.conan_internal }}

      - name: Summarize the used dependencies
        run: python runner_scripts/summarize_used_dependencies.py --installer_filename ${{ inputs.installer_name }}

      - name: Create PFX certificate from BASE64_PFX_CONTENT secret
        id: create-pfx
        env:
          PFX_CONTENT: ${{ secrets.WIN_CERT_INSTALLER_CER }}
        run: |
          $pfxPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "cert.pfx"; 
          $encodedBytes = [System.Convert]::FromBase64String($env:PFX_CONTENT); 
          Set-Content $pfxPath -Value $encodedBytes -AsByteStream;
          echo "PFX_PATH=$pfxPath" >> $env:GITHUB_OUTPUT;

      - name: Create the Windows msi installer (Powershell)
        run: |
          python ..\cura_inst\packaging\msi\create_windows_msi.py ..\cura_inst .\UltiMaker-Cura "${{inputs.installer_name}}.msi" ${{ inputs.app_name }}
        working-directory: dist

      - name: Sign the Windows msi installer (Powershell)
        env:
          PFX_PATH: ${{ steps.create-pfx.outputs.PFX_PATH }}
        run: |
          & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /f $Env:PFX_PATH /p "$Env:WIN_CERT_INSTALLER_CER_PASS" /fd SHA256 /t http://timestamp.digicert.com "${{ inputs.installer_name }}.msi"
        working-directory: dist

      - name: Create the Windows exe installer (Powershell)
        run: |
          python ..\cura_inst\packaging\NSIS\create_windows_installer.py ../cura_inst . "${{inputs.installer_name}}.exe"
        working-directory: dist

      - name: Sign the Windows exe installer (Powershell)
        env:
          PFX_PATH: ${{ steps.create-pfx.outputs.PFX_PATH }}
        run: |
          & "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe" sign /f $Env:PFX_PATH /p "$Env:WIN_CERT_INSTALLER_CER_PASS" /fd SHA256 /t http://timestamp.digicert.com "${{ inputs.installer_name }}.exe"
        working-directory: dist

      # - name: Remove internal packages before uploading
      #   run: |
      #     conan remove "*@internal/*" -f || true
      #     conan remove "cura_private_data*" -f || true

      # - name: Upload the Package(s)
      #   if: ${{ always() && ! inputs.conan_internal }}
      #   run: conan upload "*" -r cura --all -c

      - name: Upload the msi
        uses: actions/upload-artifact@v3
        with:
          name: ${{inputs.installer_name}}-msi
          path: |
            dist/${{inputs.installer_name }}.msi
          retention-days: 5

      - name: Upload the exe
        uses: actions/upload-artifact@v3
        with:
          name: ${{inputs.installer_name}}-exe
          path: |
            dist/${{inputs.installer_name }}.exe
          retention-days: 5

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Write the run info
        shell: python
        run: |
          import os
          with open("run_info.sh", "w") as f:
              f.writelines(f'echo "CURA_VERSION_FULL={os.environ["CURA_VERSION_FULL"]}" >> $GITHUB_ENV\n')

      # NOTE: The extension is .sh, since this isn't going to build-environment, so not on the Win build image.
      - name: Upload the run info
        uses: actions/upload-artifact@v3
        with:
          name: windows-run-info
          path: |
            run_info.sh
          retention-days: 5
